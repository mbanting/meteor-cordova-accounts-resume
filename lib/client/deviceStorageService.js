
var _DeviceStorageService = function(){
    var self = this;
    this.fileSystem = null;
    window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;
    window.requestFileSystem(LocalFileSystem.PERSISTENT, 5*1024*1024 /*5MB*/, function(fs){self.fileSystem = fs}, this._errorHandler)
};

/**
 * This function writes content to the filesystem.
 *
 * @param baseDirectory the base directory, must exist (recommmend to pass one of cordova.file.* predefined directories
 * @param subdirectory the subdirectory to store the file in, will be created if it doesn't exist
 * @param filename the name of the file to store the contents, will be created if it doesn't exist
 * @param contents the contents in text/plain format
 * @param callback the no property function to be called once the write is complete
 */
_DeviceStorageService.prototype.writeFile = function(baseDirectory, subdirectory, filename, contents, callback) {
    // use cordova.file.dataDirectory for app files not intended for user
    // use cordova.file.documentsDirectory for app files generated by the user
    if (this.fileSystem == null) {
        console.log("Filesystem not available");
    } else {
        window.resolveLocalFileSystemURL(baseDirectory, _getDirectory, this._errorHandler);

        function _getDirectory(entry) {
            entry.getDirectory(subdirectory, {create: true}, _getFile, this._errorHandler);
        }

        function _getFile(dirEntry) {
            dirEntry.getFile(filename, {create: true, exclusive: false}, _gotFile, this._errorHandler);
        }

        function _gotFile(fileEntry) {
            // Create a FileWriter object for our FileEntry (log.txt).
            fileEntry.createWriter(function(fileWriter) {

                fileWriter.onwriteend = function(e) {
                    console.log('Write completed.');
                };

                fileWriter.onerror = function(e) {
                    console.log('Write failed: ' + e.toString());
                };

                // Create a new Blob and write it to log.txt.
                var blob = new Blob([contents], {type: 'text/plain'});

                fileWriter.write(blob); // not supported on Windows Phone 7 & 8
                //fileWriter.write(contents);

                if (callback != null) {
                    callback();
                }

            }, this._errorHandler);
        }

    }
};

/**
 * This function reads content from a file in the filesystem.
 *
 * @param baseDirectory the base directory, must exist (recommmend to pass one of cordova.file.* predefined directories
 * @param subdirectory the subdirectory of the file to be read
 * @param filename the name of the file to be read
 * @param callback the function to be called once the read is complete, with the resulting contents of the read passed in as a parameter
 */
_DeviceStorageService.prototype.readFile = function(baseDirectory, subdirectory, filename, callback){
    if (this.fileSystem == null) {
        console.log("Filesystem not available");
    } else {
        window.resolveLocalFileSystemURL(baseDirectory, _getDirectory, this._errorHandler);

        function _getDirectory(entry) {
            entry.getDirectory(subdirectory, {}, _getFile, this._errorHandler);
        }

        function _getFile(dirEntry) {
            dirEntry.getFile(filename, {}, _gotFile, this._errorHandler);
        }

        function _gotFile(fileEntry) {
            // Get a File object representing the file,
            // then use FileReader to read its contents.
            fileEntry.file(function(file) {
                var reader = new FileReader();

                reader.onloadend = function(e) {
                    if (callback != null) {
                        callback(this.result);
                    }
                };

                reader.readAsText(file);
            }, this._errorHandler);
        }

    }
};

/**
 * This function deletes the file from the filesystem.
 *
 * @param baseDirectory the base directory, must exist (recommmend to pass one of cordova.file.* predefined directories
 * @param subdirectory the subdirectory of the file to be deleted
 * @param filename the name of the file to be deleted
 * @param callback the no property function to be called once the deletion is complete
 */
_DeviceStorageService.prototype.deleteFile = function(baseDirectory, subdirectory, filename, callback) {
    var self = this;
    if (this.fileSystem == null) {
        console.log("Filesystem not available");
    } else {
        window.resolveLocalFileSystemURL(baseDirectory, _getDirectory, this._errorHandler);

        function _getDirectory(entry) {
            entry.getDirectory(subdirectory, {}, _getFile, e => {self._errorHandler(e); callback()});
        }

        function _getFile(dirEntry) {
            console.log("_getFile");
            dirEntry.getFile(filename, {}, _gotFile, e => {self._errorHandler(e); callback()});
        }

        function _gotFile(fileEntry) {
            fileEntry.remove(function() {
                if (callback != null) {
                    callback();
                }
            }, this._errorHandler);
        }

    }
};

_DeviceStorageService.prototype._errorHandler = function (e) {
    var msg = '';

    switch (e.code) {
        case FileError.QUOTA_EXCEEDED_ERR:
            msg = 'QUOTA_EXCEEDED_ERR';
            break;
        case FileError.NOT_FOUND_ERR:
            msg = 'NOT_FOUND_ERR';
            break;
        case FileError.SECURITY_ERR:
            msg = 'SECURITY_ERR';
            break;
        case FileError.INVALID_MODIFICATION_ERR:
            msg = 'INVALID_MODIFICATION_ERR';
            break;
        case FileError.INVALID_STATE_ERR:
            msg = 'INVALID_STATE_ERR';
            break;
        default:
            msg = 'Unknown Error: (' + e.code + ')';
            break;
    };

    console.log('Error: ' + msg);
};



Meteor.startup(function () {
    if (Meteor.isCordova) {
        DeviceStorageService = new _DeviceStorageService();
    }
});
